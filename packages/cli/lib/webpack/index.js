"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.browserCompiler = browserCompiler;
exports.devCompiler = devCompiler;
var _webpack = _interopRequireDefault(require("webpack"));
var _webpackMerge = _interopRequireDefault(require("webpack-merge"));
var _webpack2 = _interopRequireDefault(require("./webpack.base"));
var _webpackScript = _interopRequireDefault(require("./webpack.script.dev"));
var _webpackScript2 = _interopRequireDefault(require("./webpack.script.prod"));
var _webpack3 = _interopRequireDefault(require("./webpack.output"));
var _webpack4 = _interopRequireDefault(require("./webpack.optimization"));
var _webpack5 = _interopRequireDefault(require("./webpack.style"));
var _webpack6 = _interopRequireDefault(require("./webpack.resource"));
var _webpack7 = _interopRequireDefault(require("./webpack.cache"));
var _webpack8 = _interopRequireDefault(require("./webpack.other"));
var _webpack9 = _interopRequireDefault(require("./webpack.fallback"));
var _webpack10 = _interopRequireDefault(require("./webpack.polyfill"));
var _utils = require("@kwok/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// for production

function getFrameWorkConfig() {
  let config = {};

  // try {
  //   const { webpackConfig } = require("@kwok/vue2.7");

  //   config = webpackConfig();
  // } catch (error) {}

  try {
    const {
      webpackConfig
    } = require("@kwok/vue3");
    config = webpackConfig();
  } catch (error) {
    console.log("error: ", error);
  }
  if (Object.keys(config).length === 0) {
    console.log('Cannot find module "@kwok/vue3" in package.json');
  }
  return config;
}
function devCompiler() {
  const config = (0, _webpackMerge.default)(_webpack2.default, _webpackScript.default, getFrameWorkConfig(), (0, _webpack5.default)(), _webpack6.default, _webpack7.default, _webpack3.default, _webpack10.default, _webpack8.default, _webpack9.default, (0, _utils.requireWebpackConfig)().default);
  return (0, _webpack.default)(config);
}

// 打包dist
function browserCompiler() {
  const config = (0, _webpackMerge.default)(_webpack2.default, _webpackScript2.default, getFrameWorkConfig(), (0, _webpack5.default)(), _webpack6.default, _webpack7.default, _webpack3.default, _webpack4.default, _webpack10.default, _webpack8.default, _webpack9.default, (0, _utils.requireWebpackConfig)().default);
  return new Promise((resolve, reject) => {
    (0, _webpack.default)(config).run((error, stats) => {
      if (error) {
        reject(error);
        return;
      }
      console.log(stats.toString({
        colors: true,
        chunks: true
      }));
      // 错误输出
      if (stats.hasErrors()) {
        reject(new Error("build failed"));
        return;
      }
      resolve("success");
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2VicGFjayIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3dlYnBhY2tNZXJnZSIsIl93ZWJwYWNrMiIsIl93ZWJwYWNrU2NyaXB0IiwiX3dlYnBhY2tTY3JpcHQyIiwiX3dlYnBhY2szIiwiX3dlYnBhY2s0IiwiX3dlYnBhY2s1IiwiX3dlYnBhY2s2IiwiX3dlYnBhY2s3IiwiX3dlYnBhY2s4IiwiX3dlYnBhY2s5IiwiX3dlYnBhY2sxMCIsIl91dGlscyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImdldEZyYW1lV29ya0NvbmZpZyIsImNvbmZpZyIsIndlYnBhY2tDb25maWciLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZGV2Q29tcGlsZXIiLCJ3ZWJwYWNrTWVyZ2UiLCJiYXNlIiwic2NyaXB0RGV2Iiwic3R5bGUiLCJyZXNvdXJjZSIsImNhY2hlIiwib3V0cHV0IiwicG9seWZpbGwiLCJvdGhlciIsImZhbGxiYWNrIiwicmVxdWlyZVdlYnBhY2tDb25maWciLCJ3ZWJwYWNrIiwiYnJvd3NlckNvbXBpbGVyIiwic2NyaXB0UHJvZCIsIm9wdGltaXphdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicnVuIiwic3RhdHMiLCJ0b1N0cmluZyIsImNvbG9ycyIsImNodW5rcyIsImhhc0Vycm9ycyIsIkVycm9yIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dlYnBhY2svaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdlYnBhY2sgZnJvbSBcIndlYnBhY2tcIjtcbmltcG9ydCB3ZWJwYWNrTWVyZ2UgZnJvbSBcIndlYnBhY2stbWVyZ2VcIjtcbmltcG9ydCBiYXNlIGZyb20gXCIuL3dlYnBhY2suYmFzZVwiO1xuaW1wb3J0IHNjcmlwdERldiBmcm9tIFwiLi93ZWJwYWNrLnNjcmlwdC5kZXZcIjtcbmltcG9ydCBzY3JpcHRQcm9kIGZyb20gXCIuL3dlYnBhY2suc2NyaXB0LnByb2RcIjtcbmltcG9ydCBvdXRwdXQgZnJvbSBcIi4vd2VicGFjay5vdXRwdXRcIjtcbmltcG9ydCBvcHRpbWl6YXRpb24gZnJvbSBcIi4vd2VicGFjay5vcHRpbWl6YXRpb25cIjsgLy8gZm9yIHByb2R1Y3Rpb25cbmltcG9ydCBzdHlsZSBmcm9tIFwiLi93ZWJwYWNrLnN0eWxlXCI7XG5pbXBvcnQgcmVzb3VyY2UgZnJvbSBcIi4vd2VicGFjay5yZXNvdXJjZVwiO1xuaW1wb3J0IGNhY2hlIGZyb20gXCIuL3dlYnBhY2suY2FjaGVcIjtcbmltcG9ydCBvdGhlciBmcm9tIFwiLi93ZWJwYWNrLm90aGVyXCI7XG5pbXBvcnQgZmFsbGJhY2sgZnJvbSBcIi4vd2VicGFjay5mYWxsYmFja1wiO1xuaW1wb3J0IHBvbHlmaWxsIGZyb20gXCIuL3dlYnBhY2sucG9seWZpbGxcIjtcbmltcG9ydCB7IHJlcXVpcmVXZWJwYWNrQ29uZmlnIH0gZnJvbSBcIkBrd29rL3V0aWxzXCI7XG5cbmZ1bmN0aW9uIGdldEZyYW1lV29ya0NvbmZpZygpIHtcbiAgbGV0IGNvbmZpZyA9IHt9O1xuXG4gIC8vIHRyeSB7XG4gIC8vICAgY29uc3QgeyB3ZWJwYWNrQ29uZmlnIH0gPSByZXF1aXJlKFwiQGt3b2svdnVlMi43XCIpO1xuXG4gIC8vICAgY29uZmlnID0gd2VicGFja0NvbmZpZygpO1xuICAvLyB9IGNhdGNoIChlcnJvcikge31cblxuICB0cnkge1xuICAgIGNvbnN0IHsgd2VicGFja0NvbmZpZyB9ID0gcmVxdWlyZShcIkBrd29rL3Z1ZTNcIik7XG5cbiAgICBjb25maWcgPSB3ZWJwYWNrQ29uZmlnKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coXCJlcnJvcjogXCIsIGVycm9yKTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnNvbGUubG9nKCdDYW5ub3QgZmluZCBtb2R1bGUgXCJAa3dvay92dWUzXCIgaW4gcGFja2FnZS5qc29uJyk7XG4gIH1cblxuICByZXR1cm4gY29uZmlnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV2Q29tcGlsZXIoKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHdlYnBhY2tNZXJnZShcbiAgICBiYXNlLFxuICAgIHNjcmlwdERldixcbiAgICBnZXRGcmFtZVdvcmtDb25maWcoKSxcbiAgICBzdHlsZSgpLFxuICAgIHJlc291cmNlLFxuICAgIGNhY2hlLFxuICAgIG91dHB1dCxcbiAgICBwb2x5ZmlsbCxcbiAgICBvdGhlcixcbiAgICBmYWxsYmFjayxcbiAgICByZXF1aXJlV2VicGFja0NvbmZpZygpLmRlZmF1bHRcbiAgKTtcblxuICByZXR1cm4gd2VicGFjayhjb25maWcpO1xufVxuXG4vLyDmiZPljIVkaXN0XG5leHBvcnQgZnVuY3Rpb24gYnJvd3NlckNvbXBpbGVyKCkge1xuICBjb25zdCBjb25maWcgPSB3ZWJwYWNrTWVyZ2UoXG4gICAgYmFzZSxcbiAgICBzY3JpcHRQcm9kLFxuICAgIGdldEZyYW1lV29ya0NvbmZpZygpLFxuICAgIHN0eWxlKCksXG4gICAgcmVzb3VyY2UsXG4gICAgY2FjaGUsXG4gICAgb3V0cHV0LFxuICAgIG9wdGltaXphdGlvbixcbiAgICBwb2x5ZmlsbCxcbiAgICBvdGhlcixcbiAgICBmYWxsYmFjayxcbiAgICByZXF1aXJlV2VicGFja0NvbmZpZygpLmRlZmF1bHRcbiAgKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHdlYnBhY2soY29uZmlnKS5ydW4oKGVycm9yLCBzdGF0cykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBzdGF0cy50b1N0cmluZyh7XG4gICAgICAgICAgY29sb3JzOiB0cnVlLFxuICAgICAgICAgIGNodW5rczogdHJ1ZSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICAvLyDplJnor6/ovpPlh7pcbiAgICAgIGlmIChzdGF0cy5oYXNFcnJvcnMoKSkge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKFwiYnVpbGQgZmFpbGVkXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShcInN1Y2Nlc3NcIik7XG4gICAgfSk7XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksZUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssU0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sU0FBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8sU0FBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVEsU0FBQSxHQUFBVCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVMsU0FBQSxHQUFBVixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVUsU0FBQSxHQUFBWCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVcsU0FBQSxHQUFBWixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVksVUFBQSxHQUFBYixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQWEsTUFBQSxHQUFBYixPQUFBO0FBQW1ELFNBQUFELHVCQUFBZSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBUEE7O0FBU25ELFNBQVNHLGtCQUFrQkEsQ0FBQSxFQUFHO0VBQzVCLElBQUlDLE1BQU0sR0FBRyxDQUFDLENBQUM7O0VBRWY7RUFDQTs7RUFFQTtFQUNBOztFQUVBLElBQUk7SUFDRixNQUFNO01BQUVDO0lBQWMsQ0FBQyxHQUFHbkIsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUUvQ2tCLE1BQU0sR0FBR0MsYUFBYSxDQUFDLENBQUM7RUFDMUIsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxTQUFTLEVBQUVGLEtBQUssQ0FBQztFQUMvQjtFQUVBLElBQUlHLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTixNQUFNLENBQUMsQ0FBQ08sTUFBTSxLQUFLLENBQUMsRUFBRTtJQUNwQ0osT0FBTyxDQUFDQyxHQUFHLENBQUMsaURBQWlELENBQUM7RUFDaEU7RUFFQSxPQUFPSixNQUFNO0FBQ2Y7QUFFTyxTQUFTUSxXQUFXQSxDQUFBLEVBQUc7RUFDNUIsTUFBTVIsTUFBTSxHQUFHLElBQUFTLHFCQUFZLEVBQ3pCQyxpQkFBSSxFQUNKQyxzQkFBUyxFQUNUWixrQkFBa0IsQ0FBQyxDQUFDLEVBQ3BCLElBQUFhLGlCQUFLLEVBQUMsQ0FBQyxFQUNQQyxpQkFBUSxFQUNSQyxpQkFBSyxFQUNMQyxpQkFBTSxFQUNOQyxrQkFBUSxFQUNSQyxpQkFBSyxFQUNMQyxpQkFBUSxFQUNSLElBQUFDLDJCQUFvQixFQUFDLENBQUMsQ0FBQ3JCLE9BQ3pCLENBQUM7RUFFRCxPQUFPLElBQUFzQixnQkFBTyxFQUFDcEIsTUFBTSxDQUFDO0FBQ3hCOztBQUVBO0FBQ08sU0FBU3FCLGVBQWVBLENBQUEsRUFBRztFQUNoQyxNQUFNckIsTUFBTSxHQUFHLElBQUFTLHFCQUFZLEVBQ3pCQyxpQkFBSSxFQUNKWSx1QkFBVSxFQUNWdkIsa0JBQWtCLENBQUMsQ0FBQyxFQUNwQixJQUFBYSxpQkFBSyxFQUFDLENBQUMsRUFDUEMsaUJBQVEsRUFDUkMsaUJBQUssRUFDTEMsaUJBQU0sRUFDTlEsaUJBQVksRUFDWlAsa0JBQVEsRUFDUkMsaUJBQUssRUFDTEMsaUJBQVEsRUFDUixJQUFBQywyQkFBb0IsRUFBQyxDQUFDLENBQUNyQixPQUN6QixDQUFDO0VBRUQsT0FBTyxJQUFJMEIsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQ3RDLElBQUFOLGdCQUFPLEVBQUNwQixNQUFNLENBQUMsQ0FBQzJCLEdBQUcsQ0FBQyxDQUFDekIsS0FBSyxFQUFFMEIsS0FBSyxLQUFLO01BQ3BDLElBQUkxQixLQUFLLEVBQUU7UUFDVHdCLE1BQU0sQ0FBQ3hCLEtBQUssQ0FBQztRQUNiO01BQ0Y7TUFDQUMsT0FBTyxDQUFDQyxHQUFHLENBQ1R3QixLQUFLLENBQUNDLFFBQVEsQ0FBQztRQUNiQyxNQUFNLEVBQUUsSUFBSTtRQUNaQyxNQUFNLEVBQUU7TUFDVixDQUFDLENBQ0gsQ0FBQztNQUNEO01BQ0EsSUFBSUgsS0FBSyxDQUFDSSxTQUFTLENBQUMsQ0FBQyxFQUFFO1FBQ3JCTixNQUFNLENBQUMsSUFBSU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pDO01BQ0Y7TUFDQVIsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUNwQixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSiIsImlnbm9yZUxpc3QiOltdfQ==