"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publicPath = exports.pkg = exports.pathItem = exports.packageName = exports.outputPath = exports.outputManifestPath = exports.library = exports.cwdPath = exports.basePath = void 0;
exports.requireManifest = requireManifest;
exports.requireWebpackConfig = requireWebpackConfig;
exports.uuid = void 0;
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _uuid = require("uuid");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
const pathItem = exports.pathItem = process.env.NODE_ENV === "development" ? "development" : "production";

// 获取package.json对象
const pkg = exports.pkg = require(_path.default.resolve("./package.json"));

// webpack config
function requireWebpackConfig() {
  const webpackConfigPath = "./src/webpack.config";
  if (_fs.default.existsSync(_path.default.resolve(webpackConfigPath))) {
    return interopRequireDefault(require(_path.default.resolve(webpackConfigPath)));
  }
  return {
    default: {}
  };
}

// 当前工作目录的绝对路径
const cwdPath = exports.cwdPath = process.cwd();

// 每次打包生成唯一id
const uuid = exports.uuid = (0, _uuid.v4)().split("-").join("");

// 包名称
const packageName = exports.packageName = pkg.name;

// 库名称
const library = exports.library = `${packageName}`;
const basePath = exports.basePath = `dist/${packageName}/${uuid}`;

// 资源异步加载路径(原始域名下的路径
const publicPath = exports.publicPath = `/${basePath}/`;

// 静态资源输出文件路径
const outputPath = exports.outputPath = `/${basePath}/`;

// manifest输出路径
const outputManifestPath = exports.outputManifestPath = _path.default.resolve("manifest", pathItem, "manifest.json");

// manifest导入
function requireManifest(packagePath) {
  return require(`${packagePath}/manifest/${pathItem}/manifest.json`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGF0aCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2ZzIiwiX3V1aWQiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJpbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJwYXRoSXRlbSIsImV4cG9ydHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwa2ciLCJwYXRoIiwicmVzb2x2ZSIsInJlcXVpcmVXZWJwYWNrQ29uZmlnIiwid2VicGFja0NvbmZpZ1BhdGgiLCJmcyIsImV4aXN0c1N5bmMiLCJjd2RQYXRoIiwiY3dkIiwidXVpZCIsInV1aWR2NCIsInNwbGl0Iiwiam9pbiIsInBhY2thZ2VOYW1lIiwibmFtZSIsImxpYnJhcnkiLCJiYXNlUGF0aCIsInB1YmxpY1BhdGgiLCJvdXRwdXRQYXRoIiwib3V0cHV0TWFuaWZlc3RQYXRoIiwicmVxdWlyZU1hbmlmZXN0IiwicGFja2FnZVBhdGgiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5cbmZ1bmN0aW9uIGludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZVxuICAgID8gb2JqXG4gICAgOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9iaixcbiAgICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBwYXRoSXRlbSA9XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBcImRldmVsb3BtZW50XCIgOiBcInByb2R1Y3Rpb25cIjtcblxuLy8g6I635Y+WcGFja2FnZS5qc29u5a+56LGhXG5leHBvcnQgY29uc3QgcGtnID0gcmVxdWlyZShwYXRoLnJlc29sdmUoXCIuL3BhY2thZ2UuanNvblwiKSk7XG5cbi8vIHdlYnBhY2sgY29uZmlnXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZVdlYnBhY2tDb25maWcoKSB7XG4gIGNvbnN0IHdlYnBhY2tDb25maWdQYXRoID0gXCIuL3NyYy93ZWJwYWNrLmNvbmZpZ1wiO1xuXG4gIGlmIChmcy5leGlzdHNTeW5jKHBhdGgucmVzb2x2ZSh3ZWJwYWNrQ29uZmlnUGF0aCkpKSB7XG4gICAgcmV0dXJuIGludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKHBhdGgucmVzb2x2ZSh3ZWJwYWNrQ29uZmlnUGF0aCkpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGVmYXVsdDoge31cbiAgfTtcbn1cblxuLy8g5b2T5YmN5bel5L2c55uu5b2V55qE57ud5a+56Lev5b6EXG5leHBvcnQgY29uc3QgY3dkUGF0aCA9IHByb2Nlc3MuY3dkKCk7XG5cbi8vIOavj+asoeaJk+WMheeUn+aIkOWUr+S4gGlkXG5leHBvcnQgY29uc3QgdXVpZCA9IHV1aWR2NCgpLnNwbGl0KFwiLVwiKS5qb2luKFwiXCIpO1xuXG4vLyDljIXlkI3np7BcbmV4cG9ydCBjb25zdCBwYWNrYWdlTmFtZSA9IHBrZy5uYW1lO1xuXG4vLyDlupPlkI3np7BcbmV4cG9ydCBjb25zdCBsaWJyYXJ5ID0gYCR7cGFja2FnZU5hbWV9YDtcblxuZXhwb3J0IGNvbnN0IGJhc2VQYXRoID0gYGRpc3QvJHtwYWNrYWdlTmFtZX0vJHt1dWlkfWA7XG5cbi8vIOi1hOa6kOW8guatpeWKoOi9vei3r+W+hCjljp/lp4vln5/lkI3kuIvnmoTot6/lvoRcbmV4cG9ydCBjb25zdCBwdWJsaWNQYXRoID0gYC8ke2Jhc2VQYXRofS9gO1xuXG4vLyDpnZnmgIHotYTmupDovpPlh7rmlofku7bot6/lvoRcbmV4cG9ydCBjb25zdCBvdXRwdXRQYXRoID0gYC8ke2Jhc2VQYXRofS9gO1xuXG4vLyBtYW5pZmVzdOi+k+WHuui3r+W+hFxuZXhwb3J0IGNvbnN0IG91dHB1dE1hbmlmZXN0UGF0aCA9IHBhdGgucmVzb2x2ZShcbiAgXCJtYW5pZmVzdFwiLFxuICBwYXRoSXRlbSxcbiAgXCJtYW5pZmVzdC5qc29uXCJcbik7XG5cbi8vIG1hbmlmZXN05a+85YWlXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZU1hbmlmZXN0KHBhY2thZ2VQYXRoKSB7XG4gIHJldHVybiByZXF1aXJlKGAke3BhY2thZ2VQYXRofS9tYW5pZmVzdC8ke3BhdGhJdGVtfS9tYW5pZmVzdC5qc29uYCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUYsT0FBQTtBQUFvQyxTQUFBRCx1QkFBQUksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUVwQyxTQUFTRyxxQkFBcUJBLENBQUNDLEdBQUcsRUFBRTtFQUNsQyxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0gsVUFBVSxHQUN4QkcsR0FBRyxHQUNIO0lBQ0VGLE9BQU8sRUFBRUU7RUFDWCxDQUFDO0FBQ1A7QUFFTyxNQUFNQyxRQUFRLEdBQUFDLE9BQUEsQ0FBQUQsUUFBQSxHQUNuQkUsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxhQUFhLEdBQUcsYUFBYSxHQUFHLFlBQVk7O0FBRXZFO0FBQ08sTUFBTUMsR0FBRyxHQUFBSixPQUFBLENBQUFJLEdBQUEsR0FBR2IsT0FBTyxDQUFDYyxhQUFJLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztBQUUxRDtBQUNPLFNBQVNDLG9CQUFvQkEsQ0FBQSxFQUFHO0VBQ3JDLE1BQU1DLGlCQUFpQixHQUFHLHNCQUFzQjtFQUVoRCxJQUFJQyxXQUFFLENBQUNDLFVBQVUsQ0FBQ0wsYUFBSSxDQUFDQyxPQUFPLENBQUNFLGlCQUFpQixDQUFDLENBQUMsRUFBRTtJQUNsRCxPQUFPWCxxQkFBcUIsQ0FBQ04sT0FBTyxDQUFDYyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0UsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0VBQ3hFO0VBRUEsT0FBTztJQUNMWixPQUFPLEVBQUUsQ0FBQztFQUNaLENBQUM7QUFDSDs7QUFFQTtBQUNPLE1BQU1lLE9BQU8sR0FBQVgsT0FBQSxDQUFBVyxPQUFBLEdBQUdWLE9BQU8sQ0FBQ1csR0FBRyxDQUFDLENBQUM7O0FBRXBDO0FBQ08sTUFBTUMsSUFBSSxHQUFBYixPQUFBLENBQUFhLElBQUEsR0FBRyxJQUFBQyxRQUFNLEVBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQyxFQUFFLENBQUM7O0FBRWhEO0FBQ08sTUFBTUMsV0FBVyxHQUFBakIsT0FBQSxDQUFBaUIsV0FBQSxHQUFHYixHQUFHLENBQUNjLElBQUk7O0FBRW5DO0FBQ08sTUFBTUMsT0FBTyxHQUFBbkIsT0FBQSxDQUFBbUIsT0FBQSxHQUFHLEdBQUdGLFdBQVcsRUFBRTtBQUVoQyxNQUFNRyxRQUFRLEdBQUFwQixPQUFBLENBQUFvQixRQUFBLEdBQUcsUUFBUUgsV0FBVyxJQUFJSixJQUFJLEVBQUU7O0FBRXJEO0FBQ08sTUFBTVEsVUFBVSxHQUFBckIsT0FBQSxDQUFBcUIsVUFBQSxHQUFHLElBQUlELFFBQVEsR0FBRzs7QUFFekM7QUFDTyxNQUFNRSxVQUFVLEdBQUF0QixPQUFBLENBQUFzQixVQUFBLEdBQUcsSUFBSUYsUUFBUSxHQUFHOztBQUV6QztBQUNPLE1BQU1HLGtCQUFrQixHQUFBdkIsT0FBQSxDQUFBdUIsa0JBQUEsR0FBR2xCLGFBQUksQ0FBQ0MsT0FBTyxDQUM1QyxVQUFVLEVBQ1ZQLFFBQVEsRUFDUixlQUNGLENBQUM7O0FBRUQ7QUFDTyxTQUFTeUIsZUFBZUEsQ0FBQ0MsV0FBVyxFQUFFO0VBQzNDLE9BQU9sQyxPQUFPLENBQUMsR0FBR2tDLFdBQVcsYUFBYTFCLFFBQVEsZ0JBQWdCLENBQUM7QUFDckUiLCJpZ25vcmVMaXN0IjpbXX0=